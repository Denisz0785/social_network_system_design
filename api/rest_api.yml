openapi: 3.0.0

info:
  title: Traveler Social Network API
  description: API для социальной сети путешественников
  version: 1.0.0

tags:
  - name: Posts
  - name: Users
  - name: Places
  - name: Feed

paths:
  /posts:
    post:
      summary: Создание нового поста
      description: Создание нового поста с текстом, местом и фотографиями
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  description: Текст поста (макс. 300 символов)
                  maxLength: 300
                place:
                  type: string
                  description: Название места (макс. 100 символов)
                  maxLength: 100
                address:
                  type: string
                  description: Дополнительный адрес (улица, дом)
                  maxLength: 200
                coordinates:
                  type: string
                  description: Географические координаты места (например, "37.7749,-122.4194")
                  maxLength: 50
                photos:
                  type: array
                  items:
                    type: string
                    description: Ссылки на изображения, которые были предварительно загружены
                    format: uri
              required:
                - description
                - place
                - address
                - coordinates
                - photos
      responses:
        200:
          description: Успешное создание поста
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Неверный запрос, не все обязательные поля заполнены или превышены ограничения
        500:
          description: Ошибка сервера
  /photos/upload:
    post:
      summary: Загрузка изображений
      description: Загрузка изображений для поста.
      tags:
        - Posts
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photos:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Список изображений для загрузки
      responses:
        200:
          description: Изображения успешно загружены
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: URL изображения
        400:
          description: Неверный запрос
        500:
          description: Ошибка сервера
  /posts/{post_id}/comments:
    post:
      summary: Создание комментария для поста
      description: Пользователь может добавить комментарий к посту
      tags:
        - Posts
      parameters:
        - name: post_id
          in: path
          required: true
          description: ID поста, к которому добавляется комментарий
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  description: Текст комментария
                  maxLength: 300
              required:
                - comment
            examples:
              request:
                value:
                  comment: "Очень интересное место, спасибо за описание!"
      responses:
        200:
          description: Успешное создание комментария
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment_id:
                    type: string
                    description: ID созданного комментария
                  post_id:
                    type: string
                    description: ID поста, к которому был добавлен комментарий
                  comment:
                    type: string
                    description: Текст комментария
                  created_at:
                    type: string
                    format: date-time
                required:
                  - comment_id
                  - post_id
                  - comment
                  - created_at
              examples:
                example1:
                  value:
                    comment_id: "abc123"
                    post_id: "123abc"
                    comment: "Очень интересное место, спасибо за описание!"
                    created_at: "2025-02-16T21:10:00Z"
        400:
          description: Неверный запрос (например, пустой комментарий)
        500:
          description: Ошибка сервера
  /posts/{post_id}/likes:
    post:
      summary: Лайк поста (или отмена лайка)
      description: Пользователь может поставить лайк на пост или отменить лайк, если он уже был поставлен
      tags:
        - Posts
      parameters:
        - name: post_id
          in: path
          required: true
          description: ID поста, который лайкает или с которого отменяется лайк
          schema:
            type: string
      responses:
        200:
          description: Лайк успешно добавлен или отменен
        400:
          description: Ошибка, если пользователь не может поставить лайк (например, если пост не существует)
        500:
          description: Ошибка сервера
  /users/{user_id}/subscriptions:
    post:
      summary: Подписка на пользователя
      description: Пользователь может подписаться на другого пользователя. Подписка добавляется, если она еще не существует.
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID пользователя, который подписывается
          schema:
            type: string
        - name: subscribe_to_user_id
          in: query
          required: true
          description: ID пользователя, на которого подписывается
          schema:
            type: string
      responses:
        200:
          description: Подписка успешно добавлена
        400:
          description: Ошибка, если пользователь уже подписан или превышен лимит подписок
        404:
          description: Пользователь, на которого подписываются, не найден
        500:
          description: Ошибка сервера
  /posts/{user_id}:
    get:
      summary: Получение постов конкретного пользователя
      description: Метод позволяет получить все посты конкретного пользователя
      tags:
        - Posts
      parameters:
        - name: user_id
          in: path
          required: true
          description: Идентификатор пользователя, чьи посты нужно получить
          schema:
            type: string
        - name: limit
          in: query
          description: Количество постов на страницу (например, 10)
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          description: Смещение (например, 0, если нужно начать с первого поста)
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: Успешно получены посты
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        404:
          description: Пользователь не найден
        500:
          description: Ошибка сервера
  /places:
    get:
      summary: Поиск популярных мест по названию
      description: Позволяет искать популярные места по строке запроса.
      tags:
        - Places
      parameters:
        - name: query
          in: query
          required: true
          description: Строка для поиска мест
          schema:
            type: string
            maxLength: 100
        - name: limit
          in: query
          description: Количество мест на страницу
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          description: Смещение для поиска
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: Успешный поиск
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    place_id:
                      type: string
                      description: Идентификатор места
                    name:
                      type: string
                      description: Название места
                    country:
                      type: string
                      description: Страна, в которой находится место
                    address:
                      type: string
                      description: Дополнительный адрес (например, улица, дом)
                      maxLength: 200
                    coordinates:
                      type: string
                      description: Географические координаты места (например, "37.7749,-122.4194" для Сан-Франциско)
                      maxLength: 50
                  required:
                    - place_id
                    - name
                    - country
              examples:
                example1:
                  value:
                    - place_id: "1"
                      name: "Бали"
                      country: "Индонезия"
                      address: "Jl. Legian, Kuta"
                      coordinates: "-8.7177,115.1675"
                    - place_id: "2"
                      name: "Париж"
                      country: "Франция"
                      address: "Ave des Champs-Élysées"
                      coordinates: "48.8696,2.3077"
        400:
          description: Неверный запрос (например, строка поиска слишком длинная)
        500:
          description: Ошибка сервера
  /feed:
    get:
      summary: Получение ленты постов для авторизованного пользователя
      description: Метод возвращает ленту постов, которые пользователь может видеть, основываясь на его подписках.
      tags:
        - Feed
      parameters:
        - name: limit
          in: query
          description: Количество постов на страницу
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          description: Смещение для ленты
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: Успешно получена лента постов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        500:
          description: Ошибка сервера
  /users/subscriptions/{user_id}:
    get:
      summary: Получение подписок пользователя
      description: Метод возвращает список всех пользователей, на которых подписан данный пользователь.
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID пользователя
          schema:
            type: string
        - name: limit
          in: query
          description: Количество подписок на страницу
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          description: Смещение для получения следующей порции подписок
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: Список подписок
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: ID подписанного пользователя
        404:
          description: Пользователь не найден
        500:
          description: Ошибка сервера
  /posts/comments/{post_id}:
    get:
      summary: Получение комментариев поста
      description: Метод возвращает все комментарии для указанного поста.
      tags:
        - Posts
      parameters:
        - name: post_id
          in: path
          required: true
          description: ID поста
          schema:
            type: string
        - name: limit
          in: query
          description: Количество комментариев на страницу
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          description: Смещение для получения следующей порции комментариев
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: Список комментариев
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    comment_id:
                      type: string
                      description: Идентификатор комментария
                    user_id:
                      type: string
                      description: Идентификатор пользователя, который написал комментарий
                    comment:
                      type: string
                      description: Текст комментария
                    created_at:
                      type: string
                      format: date-time
                      description: Время создания комментария
        404:
          description: Пост не найден
        500:
          description: Ошибка сервера
  /posts/likes/{post_id}:
    get:
      summary: Получение количества лайков на посте
      description: Метод возвращает количество лайков для указанного поста.
      tags:
        - Posts
      parameters:
        - name: post_id
          in: path
          required: true
          description: ID поста
          schema:
            type: string
      responses:
        200:
          description: Количество лайков
          content:
            application/json:
              schema:
                type: object
                properties:
                  like_count:
                    type: integer
                    description: Количество лайков на посте
        404:
          description: Пост не найден
        500:
          description: Ошибка сервера

components:
  schemas:
    Post:
      type: object
      properties:
        post_id:
          type: string
          description: Идентификатор поста
        user_id:
          type: string
          description: Идентификатор пользователя, который создал пост
          nullable: true
        description:
          type: string
          description: Текст поста
        place:
          type: string
          description: Место, к которому привязан пост
        address:
          type: string
          description: Дополнительный адрес (улица, дом)
          maxLength: 200
        coordinates:
          type: string
          description: Географические координаты места (например, "37.7749,-122.4194")
          maxLength: 50
        photos:
          type: array
          items:
            type: string
            format: uri
          description: Список фотографий, прикрепленных к посту
        created_at:
          type: string
          format: date-time
          description: Время создания поста
      required:
        - post_id
        - description
        - place
        - address
        - coordinates
        - photos
        - created_at